import './App.css'
import { useState,useEffect } from 'react';


type Note={
  id: number,
  title: string,
  content: string
}

const App=() => {

  const [notes, setNotes]=useState<
    Note[]
  >([
    {
      id:10,
      title: 'note title1',
      content: 'content1'
    },
    // {
    //   id:2,
    //   title: 'note title2',
    //   content: 'content2'
    // },
    // {
    //   id:3,
    //   title: 'note title3',
    //   content: 'content3'
    // },
    // {
    //   id:4,
    //   title: 'note title4',
    //   content: 'content4'
    // }
  ])

  const [title,setTitle]=useState('');
  const [content,setContent]=useState('');
  
  const [selectedNote, setSelectedNote]=useState<Note | null>(null);

  useEffect(()=>{
    const fetchNotes=async()=>{
      try{
        const response=
        await fetch('http://localhost:5000/api/notes');
        const notes: Note[]=await response.json();
        setNotes(notes);
      } catch(error){
        console.log(error);
      }
    }

    fetchNotes();
  },[])

  const handleNoteClick=(note: Note)=>{
    setSelectedNote(note);
    setTitle(note.title);
    setContent(note.content);
  }

  const handleUpdateNote= async (event: React.FormEvent)=>{
    event.preventDefault();
    if(!selectedNote){
      return;
    }
    

    try{
      // const updatedNote: Note={
      //   id: selectedNote.id,
      //   title: title,
      //   content: content
      // }
      const response=await fetch(
        `http://localhost:5000/api/notes/${selectedNote.id}`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            title,
            content
          }),
        }
      );
      const updatedNote=await response.json();

      const updatedNoteList=notes.map((note)=>
      note.id===selectedNote.id ? updatedNote : note
    )

    setNotes(updatedNoteList);
    setTitle('');
    setContent('');
    setSelectedNote(null)
    }catch(error){
      console.log(error);
    }


    
  }

  const handelCancel=()=>{
    setTitle('');
    setContent('');
    setSelectedNote(null);
  }

  const deleteNote=async (event: React.MouseEvent, 
    noteId: number )=>{
      event.stopPropagation(); //чтоб не было всплытия
      
      try{
        await fetch(`http://localhost:5000/api/notes/${noteId}`,
          {
            method: 'delete',
          }
        ) 
        const updatedNotes=notes.filter((note)=>
        note.id!==noteId
        )
        setNotes(updatedNotes);
      } catch(error){
        console.log(error);
      }
  }


  const handleAddNote=async (event: React.FormEvent)=>{
    event.preventDefault();
    // console.log(title, content);
    // formatEnter();
    try{
      const response=await fetch(
        'http://localhost:5000/api/notes',
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            title,
            content
          }),
        }
      );
      const newNote=await response.json();

      setNotes([newNote,...notes]);
      setTitle('');
      setContent('');
    } catch(error){
      console.log(error);
    }
    // const newNote: Note={
    //   id: notes.length+1,
    //   title: title,
    //   content: content
    // }
  }

  
  
  return (
    <div className="app-container">

      <div className='form-outer'>
      <form className="note-form"
        onSubmit={(event)=> selectedNote ? 
          handleUpdateNote(event) : handleAddNote(event)
        }
      >
        <input placeholder="Title" 
          value={title}
          onChange={(event)=>{
            setTitle(event.target.value)
          }}
        required>
        
        </input>
        <textarea className='content' placeholder="Content" rows={10}
          value={content}
          onChange={(event)=>{
            setContent(event.target.value)
          }}
        required>
        
        </textarea>
        {selectedNote ? (
          <div className='edit-buttons'>
            <button type='submit'>
              Save
            </button>
            <button onClick={handelCancel}>Cancel</button>
          </div>
        ) : (
          <button type="submit">Add note
        </button>
        )
        }
      </form>    
      </div>
      <div className="notes-grid">

        {notes.map((note) => (
          <div className="note-item"
            key={note.id}
            onClick={()=> handleNoteClick(note)}
          >
            <div className="notes-header">
              <button
                onClick={(event)=> deleteNote(event, note.id)}
              >x</button>
            </div>
            <h2>{note.title}</h2>
            <p>{note.content}</p>
          </div>
        ))}
      </div>


    </div>
  );
}

export default App;
